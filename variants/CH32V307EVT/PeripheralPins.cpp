/*
 *******************************************************************************
 * Copyright (c) 2019, STMicroelectronics
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of STMicroelectronics nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************
 * Automatically generated from STM32L432K(B-C)Ux.xml
 */
#include "Arduino.h"
#include "PeripheralPins.h"
/* =====
 * Note: Commented lines are alternative possibilities which are not used per default.
 *       If you change them, you will have to know what you do
 * =====
 */

//*** ADC ***
#ifdef ADC_MODULE_ENABLED
const PinMap PinMap_ADC[] = {
  {PA_0,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_0)}, // ADC1_IN0
  {PA_1,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_1)}, // ADC1_IN1
  {PA_2,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_2)}, // ADC1_IN2
  {PA_3,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_3)}, // ADC1_IN3
  {PA_4,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_4)}, // ADC1_IN4
  {PA_5,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_5)}, // ADC1_IN5
  {PA_6,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_6)}, // ADC1_IN6
  {PA_7,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_7)}, // ADC1_IN7
  {PB_0,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_8)}, // ADC1_IN8
  {PB_1,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_9)}, // ADC1_IN9
  {PC_0,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_10)}, // ADC1_IN10
  {PC_1,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_11)}, // ADC1_IN11
  {PC_2,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_12)}, // ADC1_IN12
  {PC_3,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_13)}, // ADC1_IN13
  {PC_4,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_14)}, // ADC1_IN14
  {PC_5,  ADC1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, ADC_Channel_15)}, // ADC1_IN15
  {NC,    NP,    0}
};
#endif

//*** DAC ***

#ifdef DAC_MODULE_ENABLED
const PinMap PinMap_DAC[] = {
  {PA_4,  DAC, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, 0)}, // DAC1
  {PA_5,  DAC, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 0, 1)}, // DAC2
  {NC,    NP,    0}
};
#endif

//*** I2C ***

#ifdef I2C_MODULE_ENABLED
const PinMap PinMap_I2C_SDA[] = {
  {PB_7,  I2C1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0)},
  {PB_11, I2C2, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0)},
  {PB_9,  I2C1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 1)},
  {NC,    NP,    0}
};
#endif

#ifdef I2C_MODULE_ENABLED
const PinMap PinMap_I2C_SCL[] = {
  {PB_6,  I2C1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0)},
  {PA_7,  I2C2, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0)},
  {PB_8,  I2C1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 1)},
  {NC,    NP,    0}
};
#endif

//*** PWM ***
//1 2 3 4 5 8 9 10  
//CHANNEL define:
//[0] complementary config CHx 0 CHxN 1
//[2:1] channel config CH1 00 CH2 01 CH3 10 CH4 11
//[3] remap config
#ifdef TIM_MODULE_ENABLED
const PinMap PinMap_PWM[] = {
  {PB_13,  TIM1,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0001)}, // TIM1_CH1N
  {PB_14,  TIM1,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0011)}, // TIM1_CH2N
  {PB_15,  TIM1,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0101)}, // TIM1_CH3N
  {PA_8,   TIM1,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0000)}, // TIM1_CH1
  {PA_9,   TIM1,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0010)}, // TIM1_CH2
  {PA_10,  TIM1,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0100)}, // TIM1_CH3
  {PA_11,  TIM1,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0110)}, // TIM1_CH4

  {PA_0,   TIM2,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0000)}, // TIM2_CH1
  {PA_1,   TIM2,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0010)}, // TIM2_CH2
  {PA_2,   TIM2,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0100)}, // TIM2_CH3
  {PA_3,   TIM2,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0110)}, // TIM2_CH4

  {PA_6,   TIM3,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0000)}, // TIM3_CH1
  {PA_7,   TIM3,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0010)}, // TIM3_CH2
  {PB_0,   TIM3,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0100)}, // TIM3_CH3
  {PB_1,   TIM3,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0110)}, // TIM3_CH4

  {PB_6,   TIM4,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0000)}, // TIM4_CH1
  {PB_7,   TIM4,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0010)}, // TIM4_CH2
  {PB_8,   TIM4,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0100)}, // TIM4_CH3
  {PB_9,   TIM4,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0110)}, // TIM4_CH4
  
  {PA_0,   TIM5,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0000)}, // TIM5_CH1
  {PA_1,   TIM5,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0010)}, // TIM5_CH2
  {PA_2,   TIM5,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0100)}, // TIM5_CH3
  {PA_3,   TIM5,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0110)}, // TIM5_CH4
  
  {PA_7,   TIM8,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0001)}, // TIM8_CH1N
  {PB_0,   TIM8,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0011)}, // TIM8_CH2N
  {PB_1,   TIM8,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0101)}, // TIM8_CH3N
  {PC_6,   TIM8,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0000)}, // TIM8_CH1
  {PC_7,   TIM8,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0010)}, // TIM8_CH2
  {PC_8,   TIM8,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0100)}, // TIM8_CH3
  {PC_9,   TIM8,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0110)}, // TIM8_CH4

  {PC_0,   TIM9,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0001)}, // TIM8_CH1N
  {PC_1,   TIM9,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0011)}, // TIM8_CH2N
  {PC_2,   TIM9,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0101)}, // TIM8_CH3N
  {PA_2,   TIM9,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0000)}, // TIM8_CH1
  {PA_3,   TIM9,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0010)}, // TIM8_CH2
  {PA_4,   TIM9,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0100)}, // TIM8_CH3
  {PC_4,   TIM9,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0110)}, // TIM8_CH4

  {PA_12,  TIM10,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0001)}, // TIM8_CH1N
  {PA_13,  TIM10,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0011)}, // TIM8_CH2N
  {PA_14,  TIM10,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0101)}, // TIM8_CH3N
  {PB_8,   TIM10,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0000)}, // TIM8_CH1
  {PB_9,   TIM10,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0010)}, // TIM8_CH2
  {PC_3,   TIM10,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0100)}, // TIM8_CH3
  {PC_4,   TIM10,   CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b0110)}, // TIM8_CH4

//remap 
  {PA_7,   TIM1,    CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b1001)}, // TIM1_CH1N_1
  {PE_8,   TIM1,    CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b1001)}, // TIM1_CH1N_3
  {PB_0,   TIM1,    CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, 1, 2, 0b1001)}, // TIM1_CH2N_1
  {NC,    NP,    0}
};
#endif

//*** SERIAL ***

#ifdef UART_MODULE_ENABLED
const PinMap PinMap_UART_TX[] = {
  {PA_9, USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PB_6,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_ENABLE, 2, 0)}, 
  {PB_15, USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_HighBit_ENABLE,2, 0)},// STLink TX
  {PA_6,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_Low_HighBit_ENABLE,2,0)},
  {PC_10, UART4,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PB_0,  UART4,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART4_ENABLE, 2, 0)}, // UART4_TX_1
  {PE_0,  UART4,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART4_ENABLE, 2, 0)}, // UART4_TX_2

  {PC_12, UART5,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PB_4,  UART5,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART5_ENABLE, 2, 0)}, // UART5_TX_1
  {PE_8,  UART5,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART5_ENABLE, 2, 0)}, // UART5_TX_2

  {PC_0,  UART6,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PB_8,  UART6,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART6_ENABLE, 2, 0)}, // UART6_TX_1
  {PE_10, UART6,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART6_ENABLE, 2, 0)}, // UART6_TX_2
  
  {PC_2,  UART7,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PA_6,  UART7,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART7_ENABLE, 2, 0)}, // UART7_TX_1
  {PE_12, UART7,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART7_ENABLE, 2, 0)}, // UART7_TX_2

  {PC_4,  UART8,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PA_14, UART8,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART8_ENABLE, 2, 0)}, // UART8_TX_1
  {PE_14, UART8,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART8_ENABLE, 2, 0)}, // UART8_TX_2

  {PA_9,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PB_6,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_ENABLE, 2, 0)}, // USART1_TX_1
  {PB_15, USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_HighBit_ENABLE,2, 0)}, // USART1_TX_2
  {PA_6,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_Low_HighBit_ENABLE,2, 0)}, // USART1_TX_3

  {PA_2,  USART2, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PD_5,  USART2, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART2_ENABLE, 2, 0)}, // USART2_TX_1

  {PB_10, USART3, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)},
  {PC_10, USART3, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART3_ENABLE, 2, 0)}, // USART3_TX_1
  {PD_8,  USART3, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_PartialRemap_USART3_ENABLE, 2, 0)}, // USART3_TX_3
  {NC,    NP,    0}
};
#endif

#ifdef UART_MODULE_ENABLED
const PinMap PinMap_UART_RX[] = {
  {PC_11, UART4,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // UART4_RX
  {PB_1,  UART4,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART4_ENABLE, 2, 0)}, // UART4_RX_1
  {PE_1,  UART4,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART4_ENABLE, 2, 0)}
  {PD_2,  UART5,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // UART5_RX
  {PB_5,  UART5,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART5_ENABLE, 2, 0)}, // UART5_RX_1
  {PE_9,  UART5,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART5_ENABLE, 2, 0)}, // UART5_RX_2

  {PC_1,  UART6,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // UART6_RX
  {PB_9,  UART6,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART6_ENABLE, 2, 0)}, // UART6_RX_1
  {PE_11, UART6,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART6_ENABLE, 2, 0)}, // UART6_RX_2

  {PC_5,  UART7,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // UART7_RX
  {PA_15, UART7,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART7_ENABLE, 2, 0)}, // UART7_RX_1
  {PE_15, UART7,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART7_ENABLE, 2, 0)}, // UART7_RX_2
  
  {PC_3,  UART8,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // UART8_RX
  {PA_7,  UART8,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART8_ENABLE, 2, 0)}, // UART8_RX_1
  {PE_13, UART8,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART8_ENABLE, 2, 0)}, // UART8_RX_2

  {PA_10, USART1, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // USART1_RX
  {PB_7,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_USART1_ENABLE, 2, 0)}, // USART1_RX_1
  {PA_8,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_USART1_HighBit_ENABLE, 2, 0)}, // USART1_RX_2
  {PA_7,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_USART1_Low_HighBit_ENABLE, 2, 0)}, // USART1_RX_3

  {PA_3,  USART2, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // USART2_RX
  {PD_6,  USART2, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_USART2_ENABLE, 2, 0)}, // USART2_RX_1

  {PB_11, USART3, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // USART3_RX
  {PC_11, USART3, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART3_ENABLE, 2, 0)}, // USART3_RX_1
  {PD_9,  USART3, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_PartialRemap_USART3_ENABLE, 2, 0)}, // USART3_RX_3
  {NC,    NP,    0}
};
#endif

#ifdef UART_MODULE_ENABLED
const PinMap PinMap_UART_RTS[] = {
  {PA_12, USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // USART1_RTS
  {PA_12, USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_ENABLE, 2, 0)}, // USART1_RTS_1
  {PA_9,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_HighBit_ENABLE, 2, 0)}, // USART1_RTS_2
  {PC_5,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART1_Low_HighBit_ENABLE, 2, 0)}, // USART1_RTS_3

  {PA_1,  USART2, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // USART2_RTS
  {PD_4,  USART2, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_USART2_ENABLE, 2, 0)}, // USART2_RTS_1
  
  {PB_14, USART3, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART3_ENABLE, 2, 0)}, // USART3_RTS
  {PB_14, USART3, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_FullRemap_USART3_ENABLE, 2, 0)}, // USART3_RTS_1
  {PD_12, USART3, CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_PartialRemap_USART3_ENABLE, 2, 0)}, // USART3_RTS_3

  {NC,    NP,    0}
};
#endif

#ifdef UART_MODULE_ENABLED
const PinMap PinMap_UART_CTS[] = {
  {PA_11, USART1, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // USART1_CTS
  {PA_11, USART1, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_USART1_ENABLE, 2, 0)}, // USART1_CTS_1
  {PA_5,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_USART1_HighBit_ENABLE, 2, 0)}, // USART1_CTS_2
  {PC_4,  USART1, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_USART1_Low_HighBit_ENABLE, 2, 0)}, // USART1_CTS_3

  {PA_0,  USART2, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // USART2_CTS
  {PD_3,  USART2, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_USART2_ENABLE, 2, 0)}, // USART2_CTS_1

  {PB_13, USART3, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // USART3_CTS
  {PB_13, USART3, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_FullRemap_USART3_ENABLE, 2, 0)}, // USART3_CTS_1
  {PD_11, USART3, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_PartialRemap_USART3_ENABLE, 2, 0)}, // USART3_CTS_3
 
  {NC,    NP,    0}
};
#endif


#ifdef SPI_MODULE_ENABLED
const PinMap PinMap_SPI_MOSI[] = {
  {PA_7,  SPI1,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // SPI1_MOSI
  {PB_5,  SPI1,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_SPI1_ENABLE, 2, 0)}, // SPI1_MOSI

  {PB_15, SPI2,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // SPI2_MOSI

  {PB_5,  SPI3,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // SPI3_MOSI
  {PC_12, SPI3,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_SPI3_ENABLE, 2, 0)}, // SPI3_MOSI
  // {PA_7,  SPI1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF5_SPI1)},
  // {PA_12, SPI1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF5_SPI1)},
  // {PC_3,  SPI2, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF5_SPI2)},
  {NC,    NP,    0}
};
#endif

#ifdef SPI_MODULE_ENABLED
const PinMap PinMap_SPI_MISO[] = {
  {PA_6,  SPI1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // SPI1_MISO
  {PB_4,  SPI1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_SPI1_ENABLE, 2, 0)}, // SPI1_MISO

  {PB_14, SPI2,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // SPI2_MISO

  {PB_4,  SPI3,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // SPI3_MISO
  {PC_11, SPI3,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_SPI3_ENABLE, 2, 0)}, // SPI3_MISO
  // {PA_6,  SPI1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF5_SPI1)},
  // {PA_11, SPI1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF5_SPI1)},
  // {PB_14,  SPI2, STM_PIN_DATA(STM_MODE_AF_PP,GPIO_PULLUP, GPIO_AF5_SPI2)},
  {NC,    NP,    0}
};
#endif

#ifdef SPI_MODULE_ENABLED
const PinMap PinMap_SPI_SCLK[] = {
  {PA_5,  SPI1,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // SPI1_SCK
  {PB_3,  SPI1,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_SPI1_ENABLE, 2, 0)}, // SPI1_SCK

  {PB_13, SPI2,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // SPI2_SCK

  {PB_3,  SPI3,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // SPI3_SCK
  {PC_10, SPI3,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_SPI3_ENABLE, 2, 0)}, // SPI3_SCK
  // {PA_1,  SPI1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF5_SPI1)},
  // {PA_5,  SPI1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF5_SPI1)},
  // {PB_13,  SPI2, STM_PIN_DATA(STM_MODE_AF_PP,GPIO_PULLUP, GPIO_AF5_SPI2)},
  {NC,    NP,    0}
};
#endif

#ifdef SPI_MODULE_ENABLED
const PinMap PinMap_SPI_SSEL[] = {
  {PA_4,  SPI1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // SPI1_NSS
  {PA_15, SPI1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_SPI1_ENABLE, 2, 0)}, // SPI1_NSS

  {PB_12, SPI2,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // SPI2_NSS

  {PA_15, SPI3,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // SPI3_NSS
  {PA_4,  SPI3,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_SPI3_ENABLE, 2, 0)}, // SPI3_NSS
  // {PA_4,  SPI1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF5_SPI1)},
  // {PB_12,  SPI2, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_NOPULL, GPIO_AF5_SPI2)},
  {NC,    NP,    0}
};
#endif

//*** CAN ***

#ifdef CAN_MODULE_ENABLED
const PinMap PinMap_CAN_RD[] = {
  {PA_11, CAN1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // CAN1_RX
  {PD_0,  CAN1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap1_CAN1_ENABLE, 2, 0)}, // CAN1_RX
  {PB_8,  CAN1,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap2_CAN1_ENABLE, 2, 0)}, // CAN1_RX

  {PB_12, CAN2,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_NONE, 2, 0)}, // CAN2_RX
  {PB_5,  CAN2,  CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_FLOAT, AFIO_Remap_CAN2_ENABLE, 2, 0)}, // CAN2_RX

 // {PA_11, CAN1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_NOPULL, GPIO_AF9_CAN1)},
  {NC,    NP,    0}
};
#endif

#ifdef CAN_MODULE_ENABLED
const PinMap PinMap_CAN_TD[] = {
  {PA_12, CAN1,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // CAN1_TX
  {PD_1,  CAN1,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap1_CAN1_ENABLE, 2, 0)}, // CAN1_TX
  {PB_9,  CAN1,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap2_CAN1_ENABLE, 2, 0)}, // CAN1_TX

  {PB_13, CAN2,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_NONE, 2, 0)}, // CAN2_TX
  {PB_6,  CAN2,  CH_PIN_DATA_EXT(GPIO_MODE_OUTPUT_50Mhz, GPIO_CNF_OUTPUT_AF_PP, AFIO_Remap_CAN2_ENABLE)}, // CAN2_TX
 // {PA_12, CAN1, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_NOPULL, GPIO_AF9_CAN1)},
  {NC,    NP,    0}
};
#endif

//*** No ETHERNET ***

//*** QUADSPI ***

// #ifdef QSPI_MODULE_ENABLED
// const PinMap PinMap_QUADSPI[] = {
//   {PA_2,  QUADSPI, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF10_QUADSPI)}, // QUADSPI_BK1_NCS
//   {PB_10, QUADSPI, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF10_QUADSPI)}, // QUADSPI_CLK
//   {PB_0,  QUADSPI, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF10_QUADSPI)}, // QUADSPI_BK1_IO1
//   {PB_1,  QUADSPI, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF10_QUADSPI)}, // QUADSPI_BK1_IO0
//   {NC,    NP,    0}
// };
// #endif

//*** USB ***

#ifdef PCD_MODULE_ENABLED
const PinMap PinMap_USB[] = {
  {PA_11, USB1DM, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 2, 0)}, // USB1DM
  {PA_12, USB1DP, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 2, 0)}, // USB2DP
  {PB_6,  USB2DM, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 2, 0)}, // USBHD_DM
  {PB_7,  USB2DP, CH_PIN_DATA_EXT(GPIO_MODE_INPUT, GPIO_CNF_INPUT_ANALOG, AFIO_NONE, 2, 0)}, // USBHD_DP
  // {PA_11, USB, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, GPIO_AF10_USB_FS)}, // USB_DM
  // {PA_12, USB, STM_PIN_DATA(STM_MODE_INPUT, GPIO_NOPULL, GPIO_AF10_USB_FS)}, // USB_DP
  //  {PA_13, USB, STM_PIN_DATA(STM_MODE_AF_PP, GPIO_PULLUP, GPIO_AF10_USB_FS)}, // USB_NOE
  
  {NC,    NP,    0}
};
#endif

