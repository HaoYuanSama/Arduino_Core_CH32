# CH32 Core and platform.
# ------------------------------
#
# For more info at:
# https://arduino.github.io/arduino-cli/latest/platform-specification/

name=CH32 boards support
version=1.0.0

# Compile variables
# ----------------------
compiler.ch.extra_include="-I{build.source.path}" "-I{build.core.path}" "-I{build.core.path}/avr/" "-I{build.core.path}/CH32/" "-I{build.core.path}/CH32/LIB" "-I{build.system.path}/{build.series}" "-I{build.system.path}/{build.series}/Core" "-I{build.system.path}/{build.series}/Debug" "-I{build.system.path}/{build.series}/Peripheral/inc" "-I{build.system.path}/{build.series}/Peripheral/src" "-I{build.system.path}/{build.series}/Startup"

compiler.warning_flags=
compiler.warning_flags.none=
compiler.warning_flags.default=
compiler.warning_flags.more=
compiler.warning_flags.all=

compiler.path={runtime.tools.mingw32-5.1.6.path}/bin/

compiler.S.cmd=riscv-none-embed-gcc
compiler.c.cmd=riscv-none-embed-gcc
compiler.cpp.cmd=riscv-none-embed-g++
compiler.ar.cmd=riscv-none-embed-ar
compiler.c.elf.cmd=riscv-none-embed-g++
compiler.objcopy.cmd=riscv-none-embed-objcopy
compiler.elf2hex.cmd=riscv-none-embed-objcopy
compiler.libraries.ldflags=

compiler.extra_flags=   "@{build.opt.path}" -march=rv32imac -mabi=ilp32 -msmall-data-limit=8 -mno-save-restore -fmessage-length=0 -fsigned-char -ffunction-sections -fdata-sections -g 

compiler.S.flags={compiler.extra_flags}  -x assembler -g "-I{build.system.path}/{build.series}/Startup/" "-I{build.core.path}/CH32/"

compiler.c.flags={compiler.extra_flags} -c {build.flags.optimize} {build.flags.debug} {compiler.warning_flags}    {compiler.ch.extra_include}

compiler.cpp.flags={compiler.extra_flags} -c {build.flags.optimize} {build.flags.debug} {compiler.warning_flags} -std={compiler.cpp.std}  -fno-threadsafe-statics  -fno-rtti -fno-exceptions -fno-use-cxa-atexit -MMD {compiler.ch.extra_include} -fpermissive

compiler.ar.flags=rcs

compiler.c.elf.flags= 

compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0

compiler.elf2bin.flags=-O binary
compiler.elf2hex.flags=-O ihex

compiler.ldflags=
compiler.size.cmd=riscv-none-embed-size
compiler.define=-DARDUINO=

# These can be overridden in boards.txt
build.extra_flags=
build.bootloader_flags=
build.ldscript=Link.ld
build.variant_h=variant.h

# These can be overridden in platform.local.txt
compiler.c.extra_flags={build.peripheral_pins}
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.cpp.std=gnu++14
compiler.S.extra_flags={build.startup_file}
compiler.ar.extra_flags=
compiler.elf2bin.extra_flags=
compiler.elf2hex.extra_flags=


compiler.arm.cmsis.c.flags="-I{build.system.path}/{build.series}/Core/"  "-I{build.system.path}/{build.series}/Peripheral/inc/" "-I{build.system.path}/{build.series}/" "-I{build.system.path}/{build.series}/Startup/"  "-I{build.system.path}/{build.series}/Debug/"  

# USB Flags
# ---------
build.usb_flags=-DUSBCON {build.usb_speed} -DUSBD_VID={build.vid} -DUSBD_PID={build.pid} -DHAL_PCD_MODULE_ENABLED

# Specify defaults for vid/pid, since an empty value is impossible to
# detect in the preprocessor, but a 0 can be checked for.
# Boards should specify either both, or neither of these.
build.vid=0
build.pid=0

# Build information's
build.info.flags=-D{build.series} -DARDUINO={runtime.ide.version} -D{build.board} -DARDUINO_ARCH_{build.arch} -DBOARD_NAME="{build.board}" -DVARIANT_H="{build.variant_h}"

# Defaults config
build.xSerial=-DHAL_UART_MODULE_ENABLED
build.enable_usb=
build.usb_speed=
build.enable_virtio=
build.peripheral_pins=
build.startup_file=
build.flags.fp=
build.flags.optimize=-Og
build.flags.debug=
build.flags.ldspecs=
build.flash_offset=0

# Pre and post build hooks
build.opt.name=build_opt.h
build.opt.sourcepath={build.source.path}/{build.opt.name}
build.opt.path={build.path}/sketch/{build.opt.name}

# Create empty {build.opt} if not exists in the sketch dir
recipe.hooks.prebuild.1.pattern.windows=cmd /c if not exist "{build.opt.sourcepath}" mkdir "{build.path}\sketch" & type NUL > "{build.opt.path}"
recipe.hooks.prebuild.1.pattern.linux=bash -c "[ -f {build.opt.sourcepath} ] || (mkdir -p {build.path}/sketch && touch {build.opt.path})"
recipe.hooks.prebuild.1.pattern.macosx=bash -c "[ -f {build.opt.sourcepath} ] || (mkdir -p {build.path}/sketch && touch {build.opt.path})"

# compile patterns
# ---------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {build.info.flags} {compiler.c.extra_flags} {build.extra_flags} {compiler.arm.cmsis.c.flags} {includes}  -c -o "{object_file}" "{source_file}"  

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {build.info.flags} {compiler.cpp.extra_flags} {build.extra_flags} {compiler.arm.cmsis.c.flags} {includes} -c -o "{object_file}" "{source_file}"  

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -o "{object_file}" -c "{source_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.extra_flags} -T "{build.variant.path}/{build.ldscript}" -nostartfiles -Xlinker --gc-sections   "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nano.specs --specs=nosys.specs  -o "{build.path}/{build.project_name}.elf" "-L{build.path}" -Wl,--start-group {object_files}  -Wl,--whole-archive "{archive_file_path}" -Wl,--no-whole-archive -lc -Wl,--end-group 

## Create output (.bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.elf2bin.flags} {compiler.elf2bin.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (.hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

build.preferred_out_format=bin

## Save binary
recipe.output.tmp_file={build.project_name}.{build.preferred_out_format}
recipe.output.save_file={build.project_name}.{build.board}.{build.preferred_out_format}

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=^(?:\.text|\.data|\.rodata)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*

# Uploader tool
# -------------------

tools.uartUploader.cmd=ConsoleUARTUpload
tools.uartUploader.cmd.windows=ConsoleUARTUpload.exe
tools.uartUploader.path.windows={runtime.tools.uartUploader.path}/bin/
tools.uartUploader.upload.params.verbose=
tools.uartUploader.upload.params.quiet= n
tools.uartUploader.upload.pattern="{path}{cmd}" {upload.verbose} -f "{build.path}/{build.project_name}.hex"

